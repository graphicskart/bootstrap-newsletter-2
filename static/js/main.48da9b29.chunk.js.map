{"version":3,"sources":["assets/img/img.png","components/NewsLetter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NewsLetter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","setState","defineProperty","target","name","value","onSubmit","preventDefault","email","alert","state","react_default","a","createElement","Col","xs","sm","className","Row","src","require","Form","Group","FormControl","type","placeholder","required","Button","variant","Component","App","Container","NewsLetter_NewsLetter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iOCGnBC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,SAAW,SAAAC,GACTR,EAAKS,SAALR,OAAAS,EAAA,EAAAT,CAAA,GACGO,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,SAVXb,EAcnBc,SAAW,SAAAN,GACTA,EAAEO,iBAEFf,EAAKS,SAAS,CACZO,MAAO,KAGTC,MAAM,2BAlBNjB,EAAKkB,MAAQ,CACXF,MAAO,IAJQhB,wEAyBjB,OACEmB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,UAAU,QAC5BN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIE,UAAU,eACrBN,EAAAC,EAAAC,cAAA,OAAKM,IAAKC,EAAQ,OAEpBT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,IACPJ,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,MAAII,UAAU,uBAAd,+BAIFN,EAAAC,EAAAC,cAAA,KAAGI,UAAU,oBAAb,gIAKFN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,IACPJ,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMf,SAAUX,KAAKW,UACnBK,EAAAC,EAAAC,cAACQ,EAAA,EAAKC,MAAN,KACEX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACEC,KAAK,QACLC,YAAY,sBACZrB,KAAK,QACLC,MAAOV,KAAKe,MAAMF,MAClBT,SAAUJ,KAAKI,SACf2B,UAAQ,KAGZf,EAAAC,EAAAC,cAACQ,EAAA,EAAKC,MAAN,CAAYL,UAAU,eACpBN,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQC,QAAQ,SAASJ,KAAK,UAA9B,oBAxDwBK,6BCYzBC,mLARX,OACEnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACEpB,EAAAC,EAAAC,cAACmB,EAAD,cAJUH,aCOEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.48da9b29.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img.d7a61ca3.png\";","import React, { Component } from \"react\";\nimport { Col, Row, Form, FormControl, Button } from \"react-bootstrap\";\n\nexport default class NewsLetter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: \"\"\n    };\n  }\n\n  onChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n\n    this.setState({\n      email: \"\"\n    });\n\n    alert(\"Submitted successfuly!\");\n  };\n\n  render() {\n    return (\n      <Col xs={12} sm={6} className=\"form\">\n        <Row>\n          <Col xs={12} className=\"text-center\">\n            <img src={require(\"../assets/img/img.png\")} />\n          </Col>\n          <Col xs={12}>\n            <p>\n              <h2 className=\"text-center heading\">\n                Sign up for our newsletter\n              </h2>\n            </p>\n            <p className=\"text-center text\">\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n              eiusmod tempor incididunt ut labore et dolore magna aliqua.\n            </p>\n          </Col>\n          <Col xs={12}>\n            <Form onSubmit={this.onSubmit}>\n              <Form.Group>\n                <FormControl\n                  type=\"email\"\n                  placeholder=\"Enter email address\"\n                  name=\"email\"\n                  value={this.state.email}\n                  onChange={this.onChange}\n                  required\n                />\n              </Form.Group>\n              <Form.Group className=\"text-center\">\n                <Button variant=\"danger\" type=\"submit\">\n                  Send\n                </Button>\n              </Form.Group>\n            </Form>\n          </Col>\n        </Row>\n      </Col>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { NewsLetter } from \"./components\";\nimport \"./App.css\";\nimport { Container } from \"react-bootstrap\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <NewsLetter />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}